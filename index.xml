<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Run/Stop Restore</title>
    <link>https://run-stop-restore.githup.io/</link>
    <description>Recent content on Run/Stop Restore</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 17 Oct 2021 13:40:14 +0200</lastBuildDate><atom:link href="https://run-stop-restore.githup.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chess</title>
      <link>https://run-stop-restore.githup.io/posts/chess/</link>
      <pubDate>Sun, 17 Oct 2021 13:40:14 +0200</pubDate>
      
      <guid>https://run-stop-restore.githup.io/posts/chess/</guid>
      <description>A basic implementation of chess written in C++14. It uses a mixture of bitboards and 0x88 with most information gathered from Chess Programming Wiki. The AI uses minimax with alpha-beta pruning plus an opening book. There is definitely room for improvements wrt. gameplay, performance and presentation.
There is also a short video of it running on an Android phone using Vulkan.
Requires WebGL2.
Controls Use left mouse button to select / deselect a piece.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://run-stop-restore.githup.io/about/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://run-stop-restore.githup.io/about/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>Physics Engine Demo</title>
      <link>https://run-stop-restore.githup.io/posts/physics/</link>
      <pubDate>Fri, 15 Oct 2021 10:21:49 +0200</pubDate>
      
      <guid>https://run-stop-restore.githup.io/posts/physics/</guid>
      <description>This is a test of my physics engine written in C++14 running in the browser using Emscripten / WASM. WebGL2 is required. The yellow entity is connected using a universal joint with two different limits. The three cyan entities are connected using multiple hinges with limits. The blue entity uses a cone joint and is currently still a work in progress.
There is also a short video of it running on Windows 10 using Vulkan.</description>
    </item>
    
  </channel>
</rss>
